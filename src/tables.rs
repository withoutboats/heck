//! Automatically generated by `tables`.
//! Do not edit manually.

/// The version of Unicode that the data included with this crate is based on.
///
/// This crate also relies on Unicode data provided by the standard library;
/// that data is versioned according to [`char::UNICODE_VERSION`].
pub const UNICODE_VERSION: (u8, u8, u8) = (15, 1, 0);

/// Whether this character can be part of a word.
pub fn allowed_in_word(c: char) -> bool {
    const BOTTOM_BITS_MASK: u32 = !((!0_u32) << 6);
    let cp: u32 = c.into();
    let top_bits = cp >> 6;
    if top_bits < 0x7F0 {
        let leaf_idx: u8 = ALLOWED_IN_WORD_ROOT[usize::try_from(top_bits).unwrap()];
        let leaf = ALLOWED_IN_WORD_LEAVES[usize::from(leaf_idx)];
        (leaf >> (cp & BOTTOM_BITS_MASK)) & 1 == 1
    } else {
        !matches!(cp, 0x0E0001 | 0x0E0020..=0x0E007F)
    }
}

static ALLOWED_IN_WORD_ROOT: [u8; 2032] = [
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x07, 0x08,
    0x00, 0x00, 0x09, 0x00, 0x00, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x00, 0x0F, 0x10, 0x00, 0x00, 0x11,
    0x12, 0x13, 0x14, 0x15, 0x00, 0x16, 0x00, 0x17, 0x00, 0x08, 0x00, 0x18, 0x00, 0x19, 0x00, 0x1A,
    0x00, 0x1B, 0x1C, 0x00, 0x00, 0x1D, 0x00, 0x1E, 0x1F, 0x20, 0x00, 0x00, 0x21, 0x00, 0x22, 0x23,
    0x00, 0x24, 0x25, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x28, 0x00,
    0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x2B, 0x2C, 0x2D, 0x00, 0x00, 0x2E,
    0x2F, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x31, 0x25, 0x00, 0x32, 0x00, 0x00, 0x33, 0x00, 0x34,
    0x35, 0x36, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x39,
    0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x43, 0x44, 0x45, 0x00, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x46, 0x47, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x48, 0x49, 0x41,
    0x00, 0x00, 0x00, 0x4A, 0x00, 0x19, 0x00, 0x00, 0x4B, 0x4C, 0x4D, 0x4E, 0x41, 0x41, 0x41, 0x4F,
    0x50, 0x00, 0x51, 0x00, 0x00, 0x00, 0x52, 0x53, 0x54, 0x55, 0x56, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x57, 0x58, 0x00, 0x00, 0x00, 0x00, 0x59, 0x5A, 0x00, 0x5B, 0x5C, 0x00, 0x5D, 0x00,
    0x5E, 0x5F, 0x00, 0x60, 0x61, 0x62, 0x00, 0x63, 0x00, 0x64, 0x00, 0x65, 0x00, 0x66, 0x00, 0x67,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x69, 0x6A,
    0x00, 0x00, 0x00, 0x00, 0x36, 0x6B, 0x00, 0x6C, 0x6D, 0x6E, 0x00, 0x1F, 0x6F, 0x70, 0x00, 0x71,
    0x00, 0x00, 0x00, 0x00, 0x72, 0x73, 0x74, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x76,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x78, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x00, 0x7A, 0x00, 0x7B, 0x73, 0x00, 0x7C, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x7E, 0x7F, 0x00,
    0x00, 0x80, 0x35, 0x81, 0x00, 0x82, 0x00, 0x83, 0x84, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x86, 0x00, 0x00, 0x00, 0x87, 0x00, 0x88, 0x89, 0x00, 0x34, 0x00, 0x00, 0x00,
    0x26, 0x00, 0x00, 0x00, 0x00, 0x8A, 0x00, 0x15, 0x1F, 0x8B, 0x8C, 0x00, 0x8D, 0x00, 0x00, 0x00,
    0x00, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F, 0x00, 0x90, 0x00, 0x91,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x00, 0x95, 0x96, 0x07, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x00, 0x15,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x41, 0x99,
    0x41, 0x41, 0x41, 0x46, 0x9A, 0x9B, 0x9C, 0x9D, 0x41, 0x9E, 0x00, 0x00, 0x41, 0x9F, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0xA0, 0xA1, 0xA2, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xA4, 0x00, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
    0xA6, 0x41, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0x00, 0x00, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0xAF, 0x41, 0xB0, 0x41, 0xB1,
    0xB2, 0xB3, 0xB4, 0x00, 0x41, 0x41, 0x41, 0x41, 0x41, 0xB5, 0xB6, 0xB7, 0x41, 0x41, 0xB8, 0x44,
];

static ALLOWED_IN_WORD_LEAVES: [u64; 185] = [
    0xFFFFFFFFFFFFFFFF,
    0x03FF000000000000,
    0x07FFFFFE07FFFFFE,
    0x76AC040000000000,
    0xFF7FFFFFFF7FFFFF,
    0x0000501F0003FFC3,
    0xBFDFFFFFFFFFFFFF,
    0xFFFFFFFFFFFFFFCF,
    0xFFBFFFFFFFFFFFFF,
    0xFFFFFFFFFFFFFCFB,
    0xFFFFFFFF03FFFFFF,
    0xBFFFFFFFFFFF19FF,
    0xFFFFFFFFFFFFFFB6,
    0xFFFFFFFF07FF0000,
    0xFFFFC3FFFFFFFFFF,
    0x9FFFFDFF9FEFFFFF,
    0xFFFFFFFFFFFF4000,
    0x3C3FFFFFFFFFFFFF,
    0x8000FFFFFFFFFFFF,
    0xFFFFFFFFBFFFFFFF,
    0xFFFFFFFFFFFCFEFF,
    0xFFFFFFFBFFFFFFFF,
    0xFFFEFFCFFFFFFFFF,
    0xD3F3FFFFFFFFFFFF,
    0xFFFCFFFFFFFFFFFF,
    0xFFFEFFFFFFFFFFFF,
    0xF807FFFFFFFFFFFF,
    0x7F7FFFFFFFFFFFFF,
    0xFFFFFFFFFFFFFFEF,
    0xFDFFFFFFFFFF7FFF,
    0xFFEFFFFFFFFFFFFF,
    0x7FFFFFFFFFFFFFFF,
    0xFFFFFFFFF3FF7FFF,
    0xC2AFFFFF03000801,
    0x3FFFFFFFFFFFFFDF,
    0xFFFFFFFFF8002040,
    0xFFFFFFFFFFFF03FF,
    0xFFFFFFFF3FFFFFFF,
    0xF7FFFFFFFFFFFFFF,
    0xFFFFFE00FFFFFFFF,
    0xFFFFFFFFFC00FFFF,
    0xFFFFFFFFFFFFFFFE,
    0xFFFF9FFFFFFFFFFF,
    0xFFFFFFFFE7FFFFFE,
    0xFFFFC7FFFFFFFFFF,
    0xFF9FFFFFFFFFFFFF,
    0xFFFFFFFFF08FFFFF,
    0xFFFFFFFFFFFFB800,
    0xFFFFFFFFFFFFFFCE,
    0x000000003FFFFFFF,
    0xBFFFC080FFFFFFFF,
    0x800FF80003FFFFFF,
    0x0FFFFFFFFFFFFFFF,
    0x07FFFFFFFFFFFFFF,
    0x3FFFFFFFFFFFFFFF,
    0xFFFFFFFFFFF7FF00,
    0x5FFFFFFFFFFFFFFF,
    0x9FFF1FFF1FFF1FFC,
    0x0000000000003000,
    0x9FFF002000000000,
    0x00000000FFFF9FFF,
    0xFFFFFFE21FFFFFFE,
    0xF3FFFD503F2FFC84,
    0xFFFFFFFFFFFF43E0,
    0x000000000000F3FF,
    0x0000000000000000,
    0x0000000040000084,
    0xFFFFFF8000000000,
    0xFFFFFFFFFFFFF800,
    0xFFC000000FFFFFFF,
    0xFFC0000000000000,
    0x00000000000FFFFF,
    0x0030000000000000,
    0x0000000000400000,
    0x21FFF81FFFFFFFFF,
    0x0000800000000000,
    0xFFFFFFFFC0000000,
    0x0000000004000000,
    0xFFF0000000000000,
    0x0000FFFFFFC00000,
    0x1F3EFFFE000000E0,
    0xFFFFFFFEFFFFFFFF,
    0xFFFFFFFF003CFFFF,
    0xFFFF7FF000000000,
    0x000003FF80000000,
    0x00000000FFFEFF00,
    0xFFFE0000000003FF,
    0x000000000000FFFF,
    0x3FFFFFFFFFFFFF80,
    0xFFFFFFFFFFFF1FFF,
    0xBFF0FFFFFFFFFFFF,
    0xFF03FFFFFFFFFFFF,
    0xFFFFFFFCFF800000,
    0xFFFFFFFFFFFFF9FF,
    0xFC3FF0FFFFFFFFFF,
    0xFF0FFFFFFFFFFFFF,
    0xE8FFFFFFFFFF3FFF,
    0xFFFF3FFFFFFFFFFF,
    0xFFFFFFFF7FFFFFFF,
    0xFFFFFFFF3FFFC001,
    0xFC7FFFFF0FFFFFFF,
    0xFFFCFFFF3FFFFFFF,
    0xFFFFF3FFF7FFFFFF,
    0xFFFFF7FFFFFFFFFF,
    0xFFFFFDFFFFFFFFFF,
    0x0003FFFFFFFFFFFF,
    0xFFFFFFFFFFFFFFF8,
    0xFFFFFFFFFFFF0000,
    0x0FFFFFFFFFFF7FFF,
    0x0000FFFFFC00FFFF,
    0xFFFFF08000080000,
    0x07FFFFFE03FF0001,
    0xFFFFFFE007FFFFFE,
    0xC1FF8080FFFFFFFF,
    0x007FFFFFFFFFFFF8,
    0x01FFFFFFFFFFFFFF,
    0xFFFFFFFEE0008C00,
    0xE00000000000FFFF,
    0xFFFFFFFFFFFEFFFF,
    0xFFFF7FFFFFFFFFFF,
    0xFE7FFFFFFF7FFFFF,
    0x7FFFFFFF7FFFFFFF,
    0x7FFFFFFFFE00FFFF,
    0xFF80FFFFFFFFFEFF,
    0xFFFFFFFFE1FFFFFF,
    0xFFFFDFFFFFFFFFFF,
    0xFFFFFFFFFC1FFFFF,
    0xFFFFFFFFFFFFFC3F,
    0xFFFFFFFFFFFFC07F,
    0xFFFFFFFFFFFFDFFC,
    0xFFCFFFFFFFFFFFF0,
    0xFFFFFFFF17FFDE1F,
    0xC0FFFFFFFFFFFFFF,
    0xFFFFFFFFD3FF07FF,
    0xFFFFFFFFFFFFFFBF,
    0xFFFFFFFFFF000001,
    0xFFFFE000FFFFFFF1,
    0xFDFFFFFFFFFFFFFF,
    0xFFFFFFFFFFFFFF8F,
    0xFFFFFFFFFFFFFF80,
    0xFFFFFFF823FFFFFF,
    0xFFFFFFFFFFFFFC00,
    0xFFFCFFFFFFFFFFC1,
    0xFE7FFFFFFFFFFFFF,
    0xFFFFFFFFFFFF0007,
    0x7FFC0000001FFFFF,
    0xFFE0FFFFFFFFFFFF,
    0xFFF9FFFFFFFFFFFF,
    0x0000FFFFFFFFFFFF,
    0xFFDFFFFFFFFFFFFF,
    0x007FFFFFFFFFFFFF,
    0xFFFFFFFFF87FFFFF,
    0xFFFFFFF06FFFFFFF,
    0xFFFFFFFFFFFFFFF0,
    0x0000018000000000,
    0xF807E3E000000000,
    0x00003C0000000FE7,
    0xFFFFF80000000000,
    0xFFFFFFFFFFFFFFDC,
    0xFFFFFFFFFF800000,
    0xF87FFFFFFFFFFFFF,
    0x00201FFFFFFFFFFF,
    0xFFFFFFFFFFFFF010,
    0xFFFFFFFFFFFF7FFF,
    0xFFFEEFFFFFFFFFFF,
    0xFFFFBFFFFFFFFFFF,
    0x0000F00000000000,
    0x00018000FFF00000,
    0xFFC0000000010001,
    0xFFFF000000001FFF,
    0xFFFF03FFFFFF03FF,
    0xFFFFC000000003FF,
    0x0000003FFFFFFFFF,
    0xF00000000000FFF8,
    0xFFFFFFC0FFFCFE00,
    0xE000E0000F000000,
    0x0780000000000000,
    0xFFFEF000FC000000,
    0x000000000000F000,
    0x00000000FC00FF00,
    0xFFFCC0000000FF00,
    0xE000C000FFF00000,
    0x400000000000FE00,
    0xFE00FE00F0003FC0,
    0x0000000000080000,
];

#[cfg(test)]
#[test]
fn test_allowed_in_words_casing_closure() {
    for c in '\0'..=char::MAX {
        if allowed_in_word(c) {
            assert!(c.to_uppercase().all(allowed_in_word));
            assert!(c.to_lowercase().all(allowed_in_word));
        }
    }
}

#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
#[repr(u8)]
pub enum CasedLetterKind {
    Lowercase = 1,
    Uppercase = 2,
    Titlecase = 3,
}

/// The case of this letter, or `None` if it is not a cased letter.
pub fn letter_casing(c: char) -> Option<CasedLetterKind> {
    const BOTTOM_BITS_MASK: u32 = !((!0_u32) << 6);
    let cp: u32 = c.into();
    let top_bits = cp >> 6;
    if top_bits < 0x7A6 {
        let leaf_idx: u8 = LETTER_CASING_ROOT[usize::try_from(top_bits).unwrap()];
        let leaf = LETTER_CASING_LEAVES[usize::from(leaf_idx)];
        match (leaf >> ((cp & BOTTOM_BITS_MASK) * 2)) & 3 {
            0 => None,
            1 => Some(CasedLetterKind::Lowercase),
            2 => Some(CasedLetterKind::Uppercase),
            3 => Some(CasedLetterKind::Titlecase),
            _ => unreachable!(),
        }
    } else {
        None
    }
}

/// Whether the character is a non-Greek titlecase letter.
pub fn is_non_greek_titlecase(c: char) -> bool {
    matches!(c, '\u{01C5}' | '\u{01C8}' | '\u{01CB}' | '\u{01F2}')
}

static LETTER_CASING_ROOT: [u8; 1958] = [
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x00, 0x00, 0x0B, 0x0C, 0x0D,
    0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x15, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x17,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x19, 0x1A, 0x1B, 0x00, 0x1C, 0x1C, 0x1D, 0x1C, 0x1E, 0x1F, 0x20, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0E, 0x25, 0x1C, 0x26, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x29, 0x00, 0x2A, 0x2B, 0x2C, 0x2D,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x2F, 0x30, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x33, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x34, 0x35, 0x36, 0x37, 0x00, 0x38, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3A, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x15, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x4F, 0x50,
];

static LETTER_CASING_LEAVES: [u128; 81] = [
    0x00000000000000000000000000000000,
    0x0015555555555554002AAAAAAAAAAAA8,
    0x00000400000000000000000000000000,
    0x55551555555555556AAA2AAAAAAAAAAA,
    0x99996666666666666666666666666666,
    0x599A6666666666666666666666659999,
    0x561699A9A659A6669A56A69AA5A9A669,
    0x6666A679666666666599999999E79E00,
    0x69A55566666666666666666666666666,
    0x55555555555555555555555566666A99,
    0x00000000555555555555545555555555,
    0x85406066000000000000000000000000,
    0x5555555555AAAA8AAAAAAAA9A22A2000,
    0xA969865566666666666656A595555555,
    0x55555555AAAAAAAAAAAAAAAAAAAAAAAA,
    0x66666666666666665555555555555555,
    0x66666666666666666666666666600006,
    0x6666666666666666666666665999999A,
    0xAAAAAAA8666666666666666666666666,
    0x555555555555555500002AAAAAAAAAAA,
    0x00000000000000000000000000015555,
    0xAAAAAAAAAAAAAAAA0000000000000000,
    0x54155555555555555555555508008AAA,
    0x05550AAAAAAAAAAAAAAAAAAAAAAAAAAA,
    0xA82AAAAAAAAAAAAAAAAAAAAA00015555,
    0x00000000005555555555555555555555,
    0x55545555554000000000000000000000,
    0x00000000000000000015555555555555,
    0x66666666666666666666666666666666,
    0x66666666666666666555566666666666,
    0xAAAA5555AAAA55550AAA0555AAAA5555,
    0x05555555AAAA5555888855550AAA0555,
    0x13AA5155FFFF5555FFFF5555FFFF5555,
    0x03AA515002AA555500AA505503AA5150,
    0xA50401AA4AA222000AA8086A5A908020,
    0x00000000000000000000000010055800,
    0x00000000000000000000000000000180,
    0xA0555966A99996A65555555555555555,
    0x00000060198001666666666666666666,
    0x00000000040045555555555555555555,
    0x00000000066666666666666666666666,
    0x00000000000000000066666666666666,
    0x66666665666666600000000000000000,
    0x69995554666666666666666666666666,
    0x666666AA6AA666666666656619806666,
    0x0010180000000000000664460019AA66,
    0x55555555000000000000000000000000,
    0x55555555000155550015555555555555,
    0x55555555555555555555555555555555,
    0x00000000000000000000554000001555,
    0x002AAAAAAAAAAAA80000000000000000,
    0x00000000000000000015555555555554,
    0x555555555555AAAAAAAAAAAAAAAAAAAA,
    0x00000000000000000000000055555555,
    0xAAAAAAAA000000000000000000000000,
    0x0055555555555555555500AAAAAAAAAA,
    0xAA2AAAAA000000000000000000000000,
    0x014555455555554555554A2AAA2AAAAA,
    0x0000002AAAAAAAAAAAAAAAAAAAAAAAAA,
    0x00000015555555555555555555555555,
    0x00000000000000005555555555555555,
    0x5555555555555555AAAAAAAAAAAAAAAA,
    0xAAAAAA5555555555555AAAAAAAAAAAAA,
    0xAAAAAAAAAAAA5555555551555AAAAAAA,
    0x54455AAAA2A82820A25555555555555A,
    0x55555555555AAAAAAAAAAAAA55555455,
    0x2A8A55555555555552AAA2AAA82A8A55,
    0xAAAAAAAAAA55555555555552AAA022AA,
    0x555AAAAAAAAAAAAA5555555555555AAA,
    0x555555555AAAAAAAAAAAAA5555555555,
    0xAA5555555555555AAAAAAAAAAAAA5555,
    0xAAAAAAAA5555555555555AAAAAAAAAAA,
    0xAAAAAAAAAAAA055555555555555AAAAA,
    0x552AAAAAAAAAAAA55515555555555552,
    0x555552AAAAAAAAAAAA55515555555555,
    0x555555552AAAAAAAAAAAA55515555555,
    0x555555555552AAAAAAAAAAAA55515555,
    0x00000000000000000000000000655515,
    0x00000000001554001555555555455555,
    0x555555555555555AAAAAAAAAAAAAAAAA,
    0x00000000000000000000000000000055,
];

/// Whether this character is a nonspacing or enclosing mark.
pub fn is_nonspacing_mark(c: char) -> bool {
    const BOTTOM_BITS_MASK: u32 = !((!0_u32) << 7);
    let cp: u32 = c.into();
    let top_bits = cp >> 7;
    if top_bits < 0x3D3 {
        let leaf_idx: u8 = NONSPACING_MARKS_ROOT[usize::try_from(top_bits).unwrap()];
        let leaf = NONSPACING_MARKS_LEAVES[usize::from(leaf_idx)];
        (leaf >> (cp & BOTTOM_BITS_MASK)) & 1 == 1
    } else {
        matches!(cp, 0x0E0100..=0x0E01EF)
    }
}

static NONSPACING_MARKS_ROOT: [u8; 979] = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
    0x18, 0x19, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x1C,
    0x1D, 0x1E, 0x1F, 0x00, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x29, 0x2A, 0x00, 0x00, 0x00, 0x00,
    0x2B, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x2E, 0x00, 0x00,
    0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x00, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x38, 0x00, 0x39, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3B, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x3E, 0x3F, 0x40,
    0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x00, 0x48, 0x49, 0x00, 0x4A, 0x4B, 0x4C, 0x4D, 0x00,
    0x4E, 0x00, 0x4F, 0x50, 0x51, 0x52, 0x00, 0x00, 0x53, 0x54, 0x55, 0x56, 0x00, 0x57, 0x58, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5D,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x00,
    0x00, 0x00, 0x60, 0x61, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x63, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x65, 0x66, 0x5B, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x69, 0x6A,
];

static NONSPACING_MARKS_LEAVES: [u128; 107] = [
    0x00000000000000000000000000000000,
    0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF,
    0x000000000000000000000000000003F8,
    0x00000000000000B6BFFFFFFFFFFE0000,
    0x00010000FFFFF8000000000007FF0000,
    0x00003D9F9FC000000000000000000000,
    0x00000000000007FFFFFF000000020000,
    0x200FF800000000000001FFC000000000,
    0x000000000E00000000003EEFFBC00000,
    0xFFFFFFFBFFFFFC0000000000FF000000,
    0x0000000C00FE21FE1400000000000007,
    0x4000000C0000201E1000000000000002,
    0x00230000000239861000000000000006,
    0xFC00000C000021BE1000000000000006,
    0x0000000C0060201E9000000000000002,
    0x00000000000020010000000000000004,
    0x0000000C00603DC1D000000000000011,
    0x0000000C000030409000000000000002,
    0x0000000C0000201E1800000000000003,
    0x00000000005C04000000000000000002,
    0x0000000000007F8007F2000000000000,
    0x0000000000007F001FF2000000000000,
    0x7FFE00000000000002A0000003000000,
    0x00000000000000401FFFFFFFFEFFE0DF,
    0x001E0001C300000066FDE00000000000,
    0x00000000000000000000000020002064,
    0x00000000E00000000000000000000000,
    0x000C0000000C0000000C0000001C0000,
    0x00000000200FFE403FB0000000000000,
    0x0000000000000000000000000000B800,
    0x00000000000000000000020000000060,
    0x00000000000000000E04018700000000,
    0x9FF81FE57F4000000000000009800000,
    0x0000000000007FFFFFFF000000000000,
    0x000FF8000000000417D000000000000F,
    0x0003A3400000000000003B3C00000003,
    0x000000000000000000CFF00000000000,
    0x031021FDFFF700000000000000000000,
    0xFFFFFFFFFFFFFFFF0000000000000000,
    0x0001FFFFFFFF00000000000000000000,
    0x00038000000000000000000000000000,
    0x80000000000000000000000000000000,
    0xFFFFFFFF000000000000000000000000,
    0x000000000000000000003C0000000000,
    0x00000000000000000000000006000000,
    0x3FF78000000000000000000000000000,
    0x000300000000000000000000C0000000,
    0x00000000000000000000106000000844,
    0x8003FFFF000000300000000000000000,
    0x000000000003FF8000003FC000000000,
    0x000000200000000033C8000000000007,
    0x100000000000100800667E0000000000,
    0x0040300000000002C19D000000000000,
    0x00002120000000000000000000000000,
    0x00000000000000000000000040000000,
    0x00000000000000000000FFFF0000FFFF,
    0x20000000000000000000000000000000,
    0x00000001000000000000000000000000,
    0x07C00000000000000000000000000000,
    0x0000000000000000870000000000F06E,
    0x00000060000000000000000000000000,
    0x0000000000000000000000F000000000,
    0xE0000000000000000000180000000000,
    0x000000000001FFC00000000000000000,
    0x0000000000000000000000000000003C,
    0x801900000000007FFF00000000000002,
    0x00000000000000040678000000000003,
    0x0008000000000000001FEF8000000007,
    0x0000000000009E007FC0000000000003,
    0x000000000000000240D3800000000000,
    0x000007F8800000000000000000000000,
    0x001F1FC0000000011800000000000003,
    0x000000004000005CFF00000000000000,
    0x000000000000000D85F8000000000000,
    0x0000000030000001B03C000000000000,
    0x0000000000000001A7F8000000000000,
    0x000000000000000000BF280000000000,
    0x000000000000000000000FBCE0000000,
    0x000000000000000006FF800000000000,
    0x00000000000000085800000000000000,
    0x000000010CF000000000000000000000,
    0x000000000E7E008079F80000000007FE,
    0x000000000000000000000000037FFC00,
    0x0000000000000000BF7F000000000000,
    0x0000000000000000006DFCFFFFFC0000,
    0x00000000000000BFB47E000000000000,
    0x00000000000000000000000000A30000,
    0x00180000000000000000000000000000,
    0x000000000000000507C0000000000003,
    0x00000000003FFF810000000000000000,
    0x001F0000000000000000000000000000,
    0x0000000000000000007F000000000000,
    0x00000000000080000000000000000000,
    0x00000010000000000000000000078000,
    0x00000000000000000000000060000000,
    0x000000000000007FFFFF3FFFFFFFFFFF,
    0xF8000380000000000000000000000000,
    0x000000000000000000003C0000000FE7,
    0x000000000000001C0000000000000000,
    0x00201FFFFFFFFFFFF87FFFFFFFFFFFFF,
    0x00000000000000000000FFFEF8000010,
    0x0000000000000000000007DBF9FFFF7F,
    0x00000000000000000000000000008000,
    0x0000F000000000000000400000000000,
    0x0000F000000000000000000000000000,
    0x00000000007F00000000000000000000,
    0x00000000000007F00000000000000000,
];

use core::{
    fmt::{self, Write},
    iter,
};

#[derive(Clone, Debug)]
pub enum ToTitlecase {
    Zero,
    One(char),
    Two(char, char),
    Three(char, char, char),
}

impl Iterator for ToTitlecase {
    type Item = char;

    fn next(&mut self) -> Option<Self::Item> {
        match *self {
            Self::Zero => None,
            Self::One(c) => {
                *self = Self::Zero;
                Some(c)
            }
            Self::Two(b, c) => {
                *self = Self::One(c);
                Some(b)
            }
            Self::Three(a, b, c) => {
                *self = Self::Two(b, c);
                Some(a)
            }
        }
    }

    fn size_hint(&self) -> (usize, Option<usize>) {
        let size = match self {
            Self::Zero => 0,
            Self::One(_) => 1,
            Self::Two(..) => 2,
            Self::Three(..) => 3,
        };
        (size, Some(size))
    }
}

impl iter::ExactSizeIterator for ToTitlecase {}

impl iter::FusedIterator for ToTitlecase {}

impl fmt::Display for ToTitlecase {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        for c in self.clone() {
            f.write_char(c)?;
        }
        Ok(())
    }
}

/// Returns an iterator that yields the titlecase mapping of this `char` as one or more `char`s.
pub fn to_titlecase(c: char) -> ToTitlecase {
    // ASCII fast path
    if c.is_ascii() {
        ToTitlecase::One(c.to_ascii_uppercase())
    } else if let Ok(idx) = TITLECASE_MAPPINGS.binary_search_by_key(&c, |&(c2, _)| c2) {
        match TITLECASE_MAPPINGS[idx].1 {
            [None, ..] => ToTitlecase::Zero,
            [Some(a), None, ..] => ToTitlecase::One(a),
            [Some(a), Some(b), None] => ToTitlecase::Two(a, b),
            [Some(a), Some(b), Some(c)] => ToTitlecase::Three(a, b, c),
        }
    } else {
        let mut uppercase = c.to_uppercase();
        match uppercase.size_hint().0 {
            0 => ToTitlecase::Zero,
            1 => ToTitlecase::One(uppercase.next().unwrap()),
            2 => ToTitlecase::Two(uppercase.next().unwrap(), uppercase.next().unwrap()),
            3 => ToTitlecase::Three(
                uppercase.next().unwrap(),
                uppercase.next().unwrap(),
                uppercase.next().unwrap(),
            ),
            _ => unreachable!(),
        }
    }
}

/// Sorted list of characters and their titlecase mappings.
/// Only characters whose titlecase differs from uppercase are included.
static TITLECASE_MAPPINGS: [(char, [Option<char>; 3]); 135] = [
    ('ß', [Some('S'), Some('s'), None]),
    ('Ǆ', [Some('ǅ'), None, None]),
    ('ǅ', [Some('ǅ'), None, None]),
    ('ǆ', [Some('ǅ'), None, None]),
    ('Ǉ', [Some('ǈ'), None, None]),
    ('ǈ', [Some('ǈ'), None, None]),
    ('ǉ', [Some('ǈ'), None, None]),
    ('Ǌ', [Some('ǋ'), None, None]),
    ('ǋ', [Some('ǋ'), None, None]),
    ('ǌ', [Some('ǋ'), None, None]),
    ('Ǳ', [Some('ǲ'), None, None]),
    ('ǲ', [Some('ǲ'), None, None]),
    ('ǳ', [Some('ǲ'), None, None]),
    ('և', [Some('Ե'), Some('ւ'), None]),
    ('ა', [Some('ა'), None, None]),
    ('ბ', [Some('ბ'), None, None]),
    ('გ', [Some('გ'), None, None]),
    ('დ', [Some('დ'), None, None]),
    ('ე', [Some('ე'), None, None]),
    ('ვ', [Some('ვ'), None, None]),
    ('ზ', [Some('ზ'), None, None]),
    ('თ', [Some('თ'), None, None]),
    ('ი', [Some('ი'), None, None]),
    ('კ', [Some('კ'), None, None]),
    ('ლ', [Some('ლ'), None, None]),
    ('მ', [Some('მ'), None, None]),
    ('ნ', [Some('ნ'), None, None]),
    ('ო', [Some('ო'), None, None]),
    ('პ', [Some('პ'), None, None]),
    ('ჟ', [Some('ჟ'), None, None]),
    ('რ', [Some('რ'), None, None]),
    ('ს', [Some('ს'), None, None]),
    ('ტ', [Some('ტ'), None, None]),
    ('უ', [Some('უ'), None, None]),
    ('ფ', [Some('ფ'), None, None]),
    ('ქ', [Some('ქ'), None, None]),
    ('ღ', [Some('ღ'), None, None]),
    ('ყ', [Some('ყ'), None, None]),
    ('შ', [Some('შ'), None, None]),
    ('ჩ', [Some('ჩ'), None, None]),
    ('ც', [Some('ც'), None, None]),
    ('ძ', [Some('ძ'), None, None]),
    ('წ', [Some('წ'), None, None]),
    ('ჭ', [Some('ჭ'), None, None]),
    ('ხ', [Some('ხ'), None, None]),
    ('ჯ', [Some('ჯ'), None, None]),
    ('ჰ', [Some('ჰ'), None, None]),
    ('ჱ', [Some('ჱ'), None, None]),
    ('ჲ', [Some('ჲ'), None, None]),
    ('ჳ', [Some('ჳ'), None, None]),
    ('ჴ', [Some('ჴ'), None, None]),
    ('ჵ', [Some('ჵ'), None, None]),
    ('ჶ', [Some('ჶ'), None, None]),
    ('ჷ', [Some('ჷ'), None, None]),
    ('ჸ', [Some('ჸ'), None, None]),
    ('ჹ', [Some('ჹ'), None, None]),
    ('ჺ', [Some('ჺ'), None, None]),
    ('ჽ', [Some('ჽ'), None, None]),
    ('ჾ', [Some('ჾ'), None, None]),
    ('ჿ', [Some('ჿ'), None, None]),
    ('ᾀ', [Some('ᾈ'), None, None]),
    ('ᾁ', [Some('ᾉ'), None, None]),
    ('ᾂ', [Some('ᾊ'), None, None]),
    ('ᾃ', [Some('ᾋ'), None, None]),
    ('ᾄ', [Some('ᾌ'), None, None]),
    ('ᾅ', [Some('ᾍ'), None, None]),
    ('ᾆ', [Some('ᾎ'), None, None]),
    ('ᾇ', [Some('ᾏ'), None, None]),
    ('ᾈ', [Some('ᾈ'), None, None]),
    ('ᾉ', [Some('ᾉ'), None, None]),
    ('ᾊ', [Some('ᾊ'), None, None]),
    ('ᾋ', [Some('ᾋ'), None, None]),
    ('ᾌ', [Some('ᾌ'), None, None]),
    ('ᾍ', [Some('ᾍ'), None, None]),
    ('ᾎ', [Some('ᾎ'), None, None]),
    ('ᾏ', [Some('ᾏ'), None, None]),
    ('ᾐ', [Some('ᾘ'), None, None]),
    ('ᾑ', [Some('ᾙ'), None, None]),
    ('ᾒ', [Some('ᾚ'), None, None]),
    ('ᾓ', [Some('ᾛ'), None, None]),
    ('ᾔ', [Some('ᾜ'), None, None]),
    ('ᾕ', [Some('ᾝ'), None, None]),
    ('ᾖ', [Some('ᾞ'), None, None]),
    ('ᾗ', [Some('ᾟ'), None, None]),
    ('ᾘ', [Some('ᾘ'), None, None]),
    ('ᾙ', [Some('ᾙ'), None, None]),
    ('ᾚ', [Some('ᾚ'), None, None]),
    ('ᾛ', [Some('ᾛ'), None, None]),
    ('ᾜ', [Some('ᾜ'), None, None]),
    ('ᾝ', [Some('ᾝ'), None, None]),
    ('ᾞ', [Some('ᾞ'), None, None]),
    ('ᾟ', [Some('ᾟ'), None, None]),
    ('ᾠ', [Some('ᾨ'), None, None]),
    ('ᾡ', [Some('ᾩ'), None, None]),
    ('ᾢ', [Some('ᾪ'), None, None]),
    ('ᾣ', [Some('ᾫ'), None, None]),
    ('ᾤ', [Some('ᾬ'), None, None]),
    ('ᾥ', [Some('ᾭ'), None, None]),
    ('ᾦ', [Some('ᾮ'), None, None]),
    ('ᾧ', [Some('ᾯ'), None, None]),
    ('ᾨ', [Some('ᾨ'), None, None]),
    ('ᾩ', [Some('ᾩ'), None, None]),
    ('ᾪ', [Some('ᾪ'), None, None]),
    ('ᾫ', [Some('ᾫ'), None, None]),
    ('ᾬ', [Some('ᾬ'), None, None]),
    ('ᾭ', [Some('ᾭ'), None, None]),
    ('ᾮ', [Some('ᾮ'), None, None]),
    ('ᾯ', [Some('ᾯ'), None, None]),
    ('ᾲ', [Some('Ὰ'), Some('ͅ'), None]),
    ('ᾳ', [Some('ᾼ'), None, None]),
    ('ᾴ', [Some('Ά'), Some('ͅ'), None]),
    ('ᾷ', [Some('Α'), Some('͂'), Some('ͅ')]),
    ('ᾼ', [Some('ᾼ'), None, None]),
    ('ῂ', [Some('Ὴ'), Some('ͅ'), None]),
    ('ῃ', [Some('ῌ'), None, None]),
    ('ῄ', [Some('Ή'), Some('ͅ'), None]),
    ('ῇ', [Some('Η'), Some('͂'), Some('ͅ')]),
    ('ῌ', [Some('ῌ'), None, None]),
    ('ῲ', [Some('Ὼ'), Some('ͅ'), None]),
    ('ῳ', [Some('ῼ'), None, None]),
    ('ῴ', [Some('Ώ'), Some('ͅ'), None]),
    ('ῷ', [Some('Ω'), Some('͂'), Some('ͅ')]),
    ('ῼ', [Some('ῼ'), None, None]),
    ('ﬀ', [Some('F'), Some('f'), None]),
    ('ﬁ', [Some('F'), Some('i'), None]),
    ('ﬂ', [Some('F'), Some('l'), None]),
    ('ﬃ', [Some('F'), Some('f'), Some('i')]),
    ('ﬄ', [Some('F'), Some('f'), Some('l')]),
    ('ﬅ', [Some('S'), Some('t'), None]),
    ('ﬆ', [Some('S'), Some('t'), None]),
    ('ﬓ', [Some('Մ'), Some('ն'), None]),
    ('ﬔ', [Some('Մ'), Some('ե'), None]),
    ('ﬕ', [Some('Մ'), Some('ի'), None]),
    ('ﬖ', [Some('Վ'), Some('ն'), None]),
    ('ﬗ', [Some('Մ'), Some('խ'), None]),
];
