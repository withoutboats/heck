use std::{
    fs::OpenOptions,
    io::{BufWriter, Write},
};

mod allowed_in_word;
mod letter_casing;
mod nonspacing_marks;
mod titlecase;
mod unicode_data;

use unicode_data::data_files;

/// Update this on new Unicode releases
const UNICODE_VERSION: (u8, u8, u8) = (15, 1, 0);

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let data = data_files()?;

    let mut out = BufWriter::new(
        OpenOptions::new()
            .write(true)
            .create(true)
            .truncate(true)
            .open("../src/tables.rs")?,
    );

    writeln!(
        &mut out,
        "//! Automatically generated by `tables`.
//! Do not edit manually.

/// The version of Unicode that the data included with this crate is based on.
///
/// This crate also relies on Unicode data provided by the standard library;
/// that data is versioned according to [`char::UNICODE_VERSION`].
pub const UNICODE_VERSION: (u8, u8, u8) = {UNICODE_VERSION:?};
"
    )?;

    let allowed_in_word = allowed_in_word::allowed_in_word(&data);
    allowed_in_word::write_table(&mut out, &allowed_in_word)?;

    letter_casing::write_table(&mut out, &data, &allowed_in_word)?;

    nonspacing_marks::write_table(&mut out, &data)?;

    titlecase::write_table(&mut out, &data)?;

    Ok(())
}
